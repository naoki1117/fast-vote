// Prisma schema for a voting application

// Generator for Prisma Client
generator client {
  provider = "prisma-client-js"
}

// PostgreSQL database configuration
datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") 
}

// User model representing users of the application
model User {
  id              String         @id @default(cuid())
  name            String?
  email           String?        @unique
  emailVerified   DateTime?      @map("email_verified")
  image           String?
  password        String
  posts           PostUser[]     // Many-to-many relation through PostUser
  followedPosts   Post[]         @relation("FollowedPosts")
  votes           Vote[]
  
  @@map("users")
}

// Post model representing posts created by users
model Post {
  id              String         @id @default(cuid())
  title           String
  content         String
  author          PostUser[]     // Many-to-many relation through PostUser
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  followers       User[]         @relation("FollowedPosts")
  votes           Vote[]
  
  @@map("posts")
}

// Intermediate model for many-to-many relation between User and Post
model PostUser {
  userId          String         @map("user_id")
  user            User           @relation(fields: [userId], references: [id])
  postId          String         @map("post_id")
  post            Post           @relation(fields: [postId], references: [id])
  
  @@id([userId, postId])
  @@map("post_users")
}

// Vote model representing votes casted by users on posts
model Vote {
  id              String         @id @default(cuid())
  user            User           @relation(fields: [userId], references: [id])
  userId          String         @map("user_id")
  post            Post           @relation(fields: [postId], references: [id])
  postId          String         @map("post_id")
  
  @@map("votes")
}

// Other models...

// VerificationToken model...
